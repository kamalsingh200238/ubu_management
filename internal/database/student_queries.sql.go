// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: student_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addStudent = `-- name: AddStudent :one
INSERT INTO
  students (name, email, password_hash)
VALUES
  ($1, $2, $3)
RETURNING
  id, name, email, password_hash
`

type AddStudentParams struct {
	Name         string
	Email        string
	PasswordHash string
}

func (q *Queries) AddStudent(ctx context.Context, arg AddStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, addStudent, arg.Name, arg.Email, arg.PasswordHash)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getSocietyByPresidentId = `-- name: GetSocietyByPresidentId :one
SELECT
  id, name, president_id, active
FROM
  societies
WHERE
  president_id = $1
`

func (q *Queries) GetSocietyByPresidentId(ctx context.Context, presidentID pgtype.Int4) (Society, error) {
	row := q.db.QueryRow(ctx, getSocietyByPresidentId, presidentID)
	var i Society
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PresidentID,
		&i.Active,
	)
	return i, err
}

const getStudentByEmail = `-- name: GetStudentByEmail :one
SELECT
  id, name, email, password_hash
FROM
  students
WHERE
  email = $1
LIMIT
  1
`

func (q *Queries) GetStudentByEmail(ctx context.Context, email string) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentByEmail, email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getStudentById = `-- name: GetStudentById :one
SELECT
  id, name, email, password_hash
FROM
  students
WHERE
  id = $1
LIMIT
  1
`

func (q *Queries) GetStudentById(ctx context.Context, id int32) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}
