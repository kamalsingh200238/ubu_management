// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: society_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSociety = `-- name: AddSociety :one
INSERT INTO
  societies (name, active, president_id)
VALUES
  ($1, $2, $3)
RETURNING
  id, name, president_id, active
`

type AddSocietyParams struct {
	Name        string
	Active      pgtype.Bool
	PresidentID pgtype.Int4
}

func (q *Queries) AddSociety(ctx context.Context, arg AddSocietyParams) (Society, error) {
	row := q.db.QueryRow(ctx, addSociety, arg.Name, arg.Active, arg.PresidentID)
	var i Society
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PresidentID,
		&i.Active,
	)
	return i, err
}

const getAllSocietiesWithPresidentWithStudentCount = `-- name: GetAllSocietiesWithPresidentWithStudentCount :many
SELECT
  a.id AS society_id,
  a.name AS society_name,
  a.president_id,
  a.active AS society_active,
  s.name AS president_name,
  s.email AS president_email,
  s.password_hash AS president_password,
  COALESCE(sa.enrolled_count, 0) AS enrolled_student_count
FROM
  societies AS a
  LEFT JOIN students AS s ON s.id = a.president_id
  LEFT JOIN (
    SELECT
      society_id,
      COUNT(*) AS enrolled_count
    FROM
      student_societies
    GROUP BY
      society_id
  ) AS sa ON a.id = sa.society_id
ORDER BY
  a.id
`

type GetAllSocietiesWithPresidentWithStudentCountRow struct {
	SocietyID            int32
	SocietyName          string
	PresidentID          pgtype.Int4
	SocietyActive        pgtype.Bool
	PresidentName        pgtype.Text
	PresidentEmail       pgtype.Text
	PresidentPassword    pgtype.Text
	EnrolledStudentCount int64
}

func (q *Queries) GetAllSocietiesWithPresidentWithStudentCount(ctx context.Context) ([]GetAllSocietiesWithPresidentWithStudentCountRow, error) {
	rows, err := q.db.Query(ctx, getAllSocietiesWithPresidentWithStudentCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSocietiesWithPresidentWithStudentCountRow
	for rows.Next() {
		var i GetAllSocietiesWithPresidentWithStudentCountRow
		if err := rows.Scan(
			&i.SocietyID,
			&i.SocietyName,
			&i.PresidentID,
			&i.SocietyActive,
			&i.PresidentName,
			&i.PresidentEmail,
			&i.PresidentPassword,
			&i.EnrolledStudentCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSocietyWithPresidentBySocietyId = `-- name: GetSocietyWithPresidentBySocietyId :one
SELECT
  s.id AS president_id,
  s.name AS president_name,
  s.email AS president_email,
  s.password_hash AS president_password_hash,
  so.id AS society_id,
  so.name AS society_name,
  so.president_id AS society_president_id,
  so.active AS society_active
FROM
  students AS s
  JOIN societies AS so ON s.id = so.president_id
WHERE
  so.id = $1
LIMIT
  1
`

type GetSocietyWithPresidentBySocietyIdRow struct {
	PresidentID           int32
	PresidentName         string
	PresidentEmail        string
	PresidentPasswordHash string
	SocietyID             int32
	SocietyName           string
	SocietyPresidentID    pgtype.Int4
	SocietyActive         pgtype.Bool
}

func (q *Queries) GetSocietyWithPresidentBySocietyId(ctx context.Context, id int32) (GetSocietyWithPresidentBySocietyIdRow, error) {
	row := q.db.QueryRow(ctx, getSocietyWithPresidentBySocietyId, id)
	var i GetSocietyWithPresidentBySocietyIdRow
	err := row.Scan(
		&i.PresidentID,
		&i.PresidentName,
		&i.PresidentEmail,
		&i.PresidentPasswordHash,
		&i.SocietyID,
		&i.SocietyName,
		&i.SocietyPresidentID,
		&i.SocietyActive,
	)
	return i, err
}

const updateSociety = `-- name: UpdateSociety :one
UPDATE societies
SET
  name = $1,
  active = $2,
  president_id = $3
WHERE
  id = $4
RETURNING
  id, name, president_id, active
`

type UpdateSocietyParams struct {
	Name        string
	Active      pgtype.Bool
	PresidentID pgtype.Int4
	ID          int32
}

func (q *Queries) UpdateSociety(ctx context.Context, arg UpdateSocietyParams) (Society, error) {
	row := q.db.QueryRow(ctx, updateSociety,
		arg.Name,
		arg.Active,
		arg.PresidentID,
		arg.ID,
	)
	var i Society
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PresidentID,
		&i.Active,
	)
	return i, err
}
